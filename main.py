import streamlit as st
import pandas as pd

from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

FRINGE = 0.6281
INDIRECT = 0.415


job_data = [
    ("ADMIN SERVICES OFFICER I-EXCLUDED", "BX", "13", ""),
    ("ADMINISTRATIVE ASST II", "B", "10", ""),
    ("ADMINISTRATIVE ASST III", "B", "12", ""),
    ("ADMINISTRATIVE SERVICES OFFICER I", "B", "13", ""),
    ("ADMINISTRATIVE SERVICES OFFICER II", "B", "15", ""),
    ("ASST COMMISSIONER", "SR", "", ""),
    ("ASST PROGRAM DIR", "B", "14", ""),
    ("ATTORNEY", "SR", "", ""),
    ("AUDIO-VISUAL SPECIALIST", "B", "11", ""),
    ("AUDITOR III", "G", "07", ""),
    ("BEHAVIORAL HEALTH ASSISTANT", "B", "10", ""),
    ("BUILDING/CONSTRUCTION INSPECTOR", "T", "16", ""),
    ("CASE MANAGER ASST", "B", "11", ""),
    ("CERTIFIED MEDICAL ASST", "B", "09", ""),
    ("CHIEF CONTRACT EXPEDITER", "B", "15", ""),
    ("CHIEF SANITARIAN", "BX", "17", ""),
    ("CLERK III", "B", "08", ""),
    ("CLERK IV", "B", "10", ""),
    ("CLINICAL THERAPIST III", "G", "07", ""),
    ("COMMISSIONER OF HEALTH", "EX", "", ""),
    ("COMMUNICABLE DISEASE CONTROL INVESTIGATOR II", "B", "12", ""),
    ("COMMUNITY OUTREACH COORD", "B", "14", ""),
    ("CONTRACTS ADMINISTRATOR", "SR", "", ""),
    ("CONTRACTS COMPLIANCE COORD", "B", "15", "X"),
    ("CONTRACTS REVIEW SPECIALIST II", "B", "13", ""),
    ("COORD OF GRANTS MANAGEMENT", "B", "14", ""),
    ("COORDINATING PLANNER", "SR", "", ""),
    ("DATA BASE ANALYST", "G", "06", ""),
    ("DATA SERVICES ADMINISTRATOR", "BX", "17", ""),
    ("DENTAL ASST", "B", "10", ""),
    ("DENTIST", "M", "SR", "X"),
    ("DEPUTY COMMISSIONER", "EX", "", ""),
    ("DIR / COMMUNITY LIAISON", "EX", "", ""),
    ("DIR OF ADMINISTRATION", "SR", "X", ""),
    ("DIR OF ADMINISTRATION I", "BX", "15", ""),
    ("DIR OF ADMINISTRATION II", "BX", "16", ""),
    ("DIR OF ADMINISTRATIVE SERVICES", "SR", "", ""),
    ("DIR OF DISEASE INVESTIGATIONS", "BX", "18", ""),
    ("DIR OF ENVIR HEALTH & SAFETY COMPLIANCE", "SR", "", ""),
    ("DIR OF ENVIRONMENTAL INSPECTIONS", "BX", "17", ""),
    ("DIR OF EPIDEMIOLOGY", "SR", "", ""),
    ("DIR OF MENTAL HEALTH CENTER", "BX", "17", ""),
    ("DIR OF NUTRITION", "SR", "", ""),
    ("DIR OF PLANNING RESEARCH AND DEVELOPMENT", "SR", "", ""),
    ("DIR OF PROGRAM OPERATIONS", "SR", "", ""),
    ("DIR OF PUBLIC AFFAIRS", "SR", "", ""),
    ("DIR OF PUBLIC HEALTH OPERATIONS", "BX", "18", ""),
    ("DIR OF SCHOOL NURSING", "", "", ""),
    ("DIRECTOR OF MARKETING", "SR", "", ""),
    ("ENVIRONMENTAL ENGINEER I", "G", "06", ""),
    ("ENVIRONMENTAL ENGINEER II", "G", "07", ""),
    ("ENVIRONMENTAL ENGINEER III", "G", "08", ""),
    ("ENVIRONMENTAL INVESTIGATOR", "B", "14", ""),
    ("EPIDEMIOLOGIST II", "G", "07", ""),
    ("EPIDEMIOLOGIST III", "G", "09", ""),
    ("EPIDEMIOLOGIST IV", "GY", "11", ""),
    ("EXEC ADMINISTRATIVE ASST II", "BX", "15", ""),
    ("FINANCE OFFICER", "G", "07", ""),
    ("FIRST DEPUTY COMMISSIONER", "EX", "", ""),
    ("GENERAL COUNSEL", "EX", "", ""),
    ("GIS ANALYST", "B", "13", ""),
    ("GRANTS RESEARCH SPECIALIST", "G", "07", ""),
    ("HEAD STOREKEEPER", "B", "10", ""),
    ("HEALTH CODE ENFORCEMENT INSPECTION ANALYST", "B", "13", ""),
    ("INFECTION PREVENTION SPECIALIST", "GY", "10", ""),
    ("INFORMATION COORD", "BX", "16", ""),
    ("INQUIRY AIDE III", "B", "09", ""),
    ("LABOR RELATIONS SUPVSR", "GY", "05", ""),
    ("LABORATORY TECHNICIAN III", "B", "11", ""),
    ("MANAGER OF QUALITY ASSURANCE", "SR", "", ""),
    ("MANAGING DEPUTY COMMISSIONER", "EX", "", ""),
    ("MEDICAL DIR", "SR", "", ""),
    ("MENTAL HEALTH CRISIS CLINICIAN", "", "", ""),
    ("MGR OF EMERGENCY MANAGEMENT SERVICES", "B", "17", ""),
    ("MGR OF FOOD PROTECTION SERVICES", "SR", "", ""),
    ("NURSE PRACTITIONER", "S", "08", ""),
    ("POLICY ANALYST", "SR", "", ""),
    ("PROGRAM ANALYST", "B", "14", ""),
    ("PROGRAM AUDITOR III", "B", "14", ""),
    ("PROGRAM DIR", "BX", "17", ""),
    ("PROJECT COORD", "BX", "15", ""),
    ("PROJECT MANAGER", "SR", "", ""),
    ("PROJECTS ADMINISTRATOR", "SR", "", ""),
    ("PSYCHIATRIC NURSE PRACTIONER", "", "", ""),
    ("PSYCHOLOGIST", "G", "08", ""),
    ("PUBLIC HEALTH ADM III - EXCLUDED", "BX", "16", ""),
    ("PUBLIC HEALTH ADMINISTRATOR I", "B", "12", ""),
    ("PUBLIC HEALTH ADMINISTRATOR II", "B", "14", ""),
    ("PUBLIC HEALTH ADMINISTRATOR III", "B", "16", ""),
    ("PUBLIC HEALTH AIDE", "B", "08", ""),
    ("PUBLIC HEALTH INFORMATICS SPECIALIST", "GY", "08", ""),
    ("PUBLIC HEALTH NURSE I", "S", "04", ""),
    ("PUBLIC HEALTH NURSE II", "S", "05", ""),
    ("PUBLIC HEALTH NURSE III", "SZ", "06", ""),
    ("PUBLIC HEALTH NURSE IV", "SZ", "07", ""),
    ("PUBLIC HEALTH NUTRITIONIST I", "G", "02", ""),
    ("PUBLIC HEALTH NUTRITIONIST II", "G", "03", ""),
    ("PUBLIC HEALTH NUTRITIONIST III", "GY", "05", ""),
    ("RECOVERY TEAM PROGRAM MGR", "", "", ""),
    ("REGIONAL COMMUNICABLE DISEASE INVESTIGATOR", "B", "15", ""),
    ("REGIONAL NUTRITION COORD", "G", "07", ""),
    ("SANITARIAN II", "B", "14", ""),
    ("SENIOR DATA ENTRY OPERATOR", "B", "09", ""),
    ("SENIOR EMERGENCY MANAGEMENT COORD", "B", "16", ""),
    ("SENIOR ENVIRONMENTAL INSPECTOR", "B", "14", ""),
    ("SENIOR EQUITY OFFICER", "", "", ""),
    ("SENIOR HELP DESK TECHNICIAN", "B", "14", ""),
    ("SENIOR PERSONNEL ASSISTANT", "B", "12", ""),
    ("SENIOR POLICY ANALYST", "SR", "", ""),
    ("SENIOR PROGRAMMER/ANALYST", "G", "08", ""),
    ("SR DIR OF CRISIS SERVICES", "", "", ""),
    ("SR RECOVERY TEAM PROGRAM MGR", "", "", ""),
    ("STAFF ASSISTANT - EXCLUDED", "BX", "13", ""),
    ("STAFF ASST", "B", "13", ""),
    ("SUPERVISING DISEASE CONTROL INVESTIGATOR", "B", "14", ""),
    ("SUPERVISING DISEASE CONTROL INVESTIGATOR - EXCL", "BX", "14", ""),
    ("SUPERVISING ENVIRONMENTAL ENGINEER", "GY", "10", ""),
    ("SUPERVISING ENVIRONMENTAL INSPECTOR", "BX", "15", ""),
    ("SUPERVISING SANITARIAN", "BX", "16", ""),
    ("SUPRVNG BUILDING/CONTRUCT INSPECTOR", "T", "17", ""),
    ("SUPVSR OF DATA ENTRY OPERATORS", "B", "11", ""),
    ("SUPVSR OF PERSONNEL ADMINISTRATION", "BX", "17", ""),
    ("TRAINING DIRECTOR", "BX", "16", ""),
    ("TRAINING OFFICER", "B", "14", ""),
    ("WEB AUTHOR", "B", "15", "")
]

salary_schedule = {
    'B': {'2023': {
        '01': (25980, 26796, 28128, 29412, 30852, 32304, 34176, 35808, 37512, 39312, 41124, 43092, 45084, 47168),
        '02': (27264, 28128, 29412, 30852, 32304, 33816, 35808, 37512, 39312, 41124, 43092, 45084, 47268),
        '03': (28524, 29412, 30852, 32304, 33816, 35412, 37512, 39312, 41124, 43092, 45084, 47268, 49488),
        '04': (31320, 32304, 33816, 35412, 37116, 38868, 41124, 43092, 45084, 47268, 49488, 51888, 54324),
        '05': (31836, 32832, 34380, 36036, 37740, 39528, 41832, 43848, 45888, 48048, 50376, 52740, 55212),
        '06': (36000, 37116, 38868, 40716, 42600, 44712, 47268, 49488, 51888, 54324, 56868, 59592, 62460),
        '07': (37704, 38868, 40716, 42600, 44712, 46776, 49488, 51888, 54324, 56868, 59592, 62460, 65388),
        '08': (39492, 40716, 42600, 44712, 46776, 48996, 51888, 54324, 56868, 59592, 62460, 65388, 68556),
        '09': (43344, 44712, 46776, 48996, 51372, 53784, 56868, 59592, 62460, 65388, 68556, 71784, 75168),
        '10': (47532, 48996, 51372, 53784, 56328, 59004, 62460, 65388, 68556, 71784, 75168, 78804, 82500),
        '11': (52176, 53784, 56328, 59004, 61872, 64740, 68556, 71784, 75168, 78804, 82500, 86436, 90540),
        '12': (57240, 59004, 61872, 64740, 67872, 71052, 75168, 78804, 82500, 86436, 90540, 94824, 99360),
        '13': (62784, 64740, 67872, 71052, 74424, 77964, 82500, 86436, 90540, 94824, 99360, 103980, 108996),
        '14': (68940, 71052, 74424, 77964, 81672, 85572, 90540, 94824, 99360, 103980, 108996, 114252, 119580),
        '15': (75624, 77964, 81672, 85572, 89640, 93876, 99360, 103980, 108996, 114252, 119580, 125292, 131232),
        '16': (83028, 85572, 89640, 93876, 98388, 102996, 108996, 114252, 119580, 125292, 131232, 137484, 143976),
        '17': (91044, 93876, 98388, 102996, 107904, 113064, 119580, 125292, 131232, 137484, 143976, 150888, 157932)
    }, '2024': {
        '01': (26759.40, 27599.88, 28971.84, 30294.36, 31777.56, 33273.12, 35201.28, 36882.24, 38637.36, 40491.36, 42357.72, 44384.76, 46523.04),
        '02': (28081.92, 28971.84, 30294.36, 31777.56, 33273.12, 34830.48, 36882.24, 38637.36, 40491.36, 42357.72, 44384.76, 46523.04, 48686.04),
        '03': (29379.72, 30294.36, 31777.56, 33273.12, 34830.48, 36474.36, 38637.36, 40491.36, 42357.72, 44384.76, 46523.04, 48686.04, 50972.64),
        '04': (32259.60, 33273.12, 34830.48, 36474.36, 38229.48, 40034.04, 42357.72, 44384.76, 46523.04, 48686.04, 50972.64, 53444.64, 55953.72),
        '05': (32791.08, 33816.96, 35411.40, 37117.08, 38872.20, 40713.84, 43086.96, 45163.44, 47264.64, 49489.44, 51887.28, 54322.20, 56868.36),
        '06': (37080.00, 38229.48, 40034.04, 41937.48, 43878.00, 46053.36, 48686.04, 50972.64, 53444.64, 55953.72, 58574.04, 61379.76, 64333.80),
        '07': (38835.12, 40034.04, 41937.48, 43878.00, 46053.36, 48179.28, 50972.64, 53444.64, 55953.72, 58574.04, 61379.76, 64333.80, 67349.64),
        '08': (40676.76, 41937.48, 43878.00, 46053.36, 48179.28, 50465.88, 53444.64, 55953.72, 58574.04, 61379.76, 64333.80, 67349.64, 70612.68),
        '09': (44644.32, 46053.36, 48179.28, 50465.88, 52913.16, 55397.52, 58574.04, 61379.76, 64333.80, 67349.64, 70612.68, 73937.52, 77423.04),
        '10': (48957.96, 50465.88, 52913.16, 55397.52, 58017.84, 60774.12, 64333.80, 67349.64, 70612.68, 73937.52, 77423.04, 81168.12, 84975.00),
        '11': (53741.28, 55397.52, 58017.84, 60774.12, 63728.16, 66682.20, 70612.68, 73937.52, 77423.04, 81168.12, 84975.00, 89029.08, 93256.20),
        '12': (58957.20, 60774.12, 63728.16, 66682.20, 69908.16, 73183.56, 77423.04, 81168.12, 84975.00, 89029.08, 93256.20, 97668.72, 102340.80),
        '13': (64667.52, 66682.20, 69908.16, 73183.56, 76656.72, 80302.92, 84975.00, 89029.08, 93256.20, 97668.72, 102340.80, 107099.40, 112265.88),
        '14': (71008.20, 73183.56, 76656.72, 80302.92, 84122.16, 88139.16, 93256.20, 97668.72, 102340.80, 107099.40, 112265.88, 117679.56, 123167.40),
        '15': (77892.72, 80302.92, 84122.16, 88139.16, 92329.20, 96692.28, 102340.80, 107099.40, 112265.88, 117679.56, 123167.40, 129050.76, 135168.96),
        '16': (85518.84, 88139.16, 92329.20, 96692.28, 101339.64, 106085.88, 112265.88, 117679.56, 123167.40, 129050.76, 135168.96, 141608.52, 148295.28),
        '17': (93775.32, 96692.28, 101339.64, 106085.88, 111141.12, 116455.92, 123167.40, 129050.76, 135168.96, 141608.52, 148295.28, 155414.64, 162669.96)
    }, '2025': {
        '01': (28097.37, 28979.87, 30420.43, 31809.08, 33366.44, 34936.78, 36961.34, 38726.35, 40569.23, 42515.93, 44475.61, 46604.00, 48849.19),
        '02': (29486.02, 30420.43, 31809.08, 33366.44, 34936.78, 36572.00, 38726.35, 40569.23, 42515.93, 44475.61, 46604.00, 48849.19, 51120.34),
        '03': (30848.71, 31809.08, 33366.44, 34936.78, 36572.00, 38298.08, 40569.23, 42515.93, 44475.61, 46604.00, 48849.19, 51120.34, 53521.27),
        '04': (33872.58, 34936.78, 36572.00, 38298.08, 40140.95, 42035.74, 44475.61, 46604.00, 48849.19, 51120.34, 53521.27, 56116.87, 58751.41),
        '05': (34430.63, 35507.81, 37181.97, 38972.93, 40815.81, 42749.53, 45241.31, 47421.61, 49627.87, 51963.91, 54481.64, 57038.31, 59711.78),
        '06': (38934.00, 40140.95, 42035.74, 44034.35, 46071.90, 48356.03, 51120.34, 53521.27, 56116.87, 58751.41, 61502.74, 64448.75, 67550.49),
        '07': (40776.88, 42035.74, 44034.35, 46071.90, 48356.03, 50588.24, 53521.27, 56116.87, 58751.41, 61502.74, 64448.75, 67550.49, 70717.12),
        '08': (42710.60, 44034.35, 46071.90, 48356.03, 50588.24, 52989.17, 56116.87, 58751.41, 61502.74, 64448.75, 67550.49, 70717.12, 74143.31),
        '09': (46876.54, 48356.03, 50588.24, 52989.17, 55558.82, 58167.40, 61502.74, 64448.75, 67550.49, 70717.12, 74143.31, 77634.40, 81294.19),
        '10': (51405.86, 52989.17, 55558.82, 58167.40, 60918.73, 63812.83, 67550.49, 70717.12, 74143.31, 77634.40, 81294.19, 85226.53, 89223.75),
        '11': (56428.34, 58167.40, 60918.73, 63812.83, 66914.57, 70016.31, 74143.31, 77634.40, 81294.19, 85226.53, 89223.75, 93480.53, 97919.01),
        '12': (61905.06, 63812.83, 66914.57, 70016.31, 73403.57, 76842.74, 81294.19, 85226.53, 89223.75, 93480.53, 97919.01, 102552.16, 107457.84),
        '13': (67900.90, 70016.31, 73403.57, 76842.74, 80489.56, 84318.07, 89223.75, 93480.53, 97919.01, 102552.16, 107457.84, 112454.37, 117879.17),
        '14': (74558.61, 76842.74, 80489.56, 84318.07, 88328.27, 92546.12, 97919.01, 102552.16, 107457.84, 112454.37, 117879.17, 123563.54, 129325.77),
        '15': (81787.36, 84318.07, 88328.27, 92546.12, 96945.66, 101526.89, 107457.84, 112454.37, 117879.17, 123563.54, 129325.77, 135503.30, 141927.41),
        '16': (89794.78, 92546.12, 96945.66, 101526.89, 106406.62, 111390.17, 117879.17, 123563.54, 129325.77, 135503.30, 141927.41, 148688.95, 155710.04),
        '17': (98464.09, 101526.89, 106406.62, 111390.17, 116698.18, 122278.72, 129325.77, 135503.30, 141927.41, 148688.95, 155710.04, 163185.37, 170803.46)
    }, '2026': {
        '01': (29502.24, 30428.87, 31941.45, 33399.53, 35034.76, 36683.61, 38809.41, 40662.67, 42597.69, 44641.72, 46699.39, 48934.20, 51291.65),
        '02': (30960.32, 31941.45, 33399.53, 35034.76, 36683.61, 38400.60, 40662.67, 42597.69, 44641.72, 46699.39, 48934.20, 51291.65, 53676.36),
        '03': (32391.14, 33399.53, 35034.76, 36683.61, 38400.60, 40212.98, 42597.69, 44641.72, 46699.39, 48934.20, 51291.65, 53676.36, 56197.34),
        '04': (35566.21, 36683.61, 38400.60, 40212.98, 42148.00, 44137.53, 46699.39, 48934.20, 51291.65, 53676.36, 56197.34, 58922.72, 61688.98),
        '05': (36152.17, 37283.20, 39041.07, 40921.58, 42856.60, 44887.01, 47503.37, 49792.69, 52109.27, 54562.11, 57205.73, 59890.23, 62697.37),
        '06': (40880.70, 42148.00, 44137.53, 46236.07, 48375.50, 50773.83, 53676.36, 56197.34, 58922.72, 61688.98, 64577.88, 67671.19, 70928.01),
        '07': (42815.72, 44137.53, 46236.07, 48375.50, 50773.83, 53117.66, 56197.34, 58922.72, 61688.98, 64577.88, 67671.19, 70928.01, 74252.98),
        '08': (44846.13, 46236.07, 48375.50, 50773.83, 53117.66, 55638.63, 58922.72, 61688.98, 64577.88, 67671.19, 70928.01, 74252.98, 77850.48),
        '09': (49220.36, 50773.83, 53117.66, 55638.63, 58336.76, 61075.77, 64577.88, 67671.19, 70928.01, 74252.98, 77850.48, 81516.12, 85358.90),
        '10': (53976.15, 55638.63, 58336.76, 61075.77, 63964.67, 67003.47, 70928.01, 74252.98, 77850.48, 81516.12, 85358.90, 89487.85, 93684.94),
        '11': (59249.76, 61075.77, 63964.67, 67003.47, 70260.30, 73517.13, 77850.48, 81516.12, 85358.90, 89487.85, 93684.94, 98154.56, 102814.96),
        '12': (65000.31, 67003.47, 70260.30, 73517.13, 77073.75, 80684.87, 85358.90, 89487.85, 93684.94, 98154.56, 102814.96, 107679.76, 112830.73),
        '13': (71295.94, 73517.13, 77073.75, 80684.87, 84514.03, 88533.97, 93684.94, 98154.56, 102814.96, 107679.76, 112830.73, 118077.09, 123773.13),
        '14': (78286.54, 80684.87, 84514.03, 88533.97, 92744.68, 97173.42, 102814.96, 107679.76, 112830.73, 118077.09, 123773.13, 129741.71, 135792.06),
        '15': (85876.72, 88533.97, 92744.68, 97173.42, 101792.94, 106603.24, 112830.73, 118077.09, 123773.13, 129741.71, 135792.06, 142278.46, 149023.78),
        '16': (94284.52, 97173.42, 101792.94, 106603.24, 111726.95, 116959.68, 123773.13, 129741.71, 135792.06, 142278.46, 149023.78, 156123.39, 163495.55),
        '17': (103387.29, 106603.24, 111726.95, 116959.68, 122533.08, 128392.65, 135792.06, 142278.46, 149023.78, 156123.39, 163495.55, 171344.64, 179343.63)
    }, '2027': {
        '01': (30461.06, 31417.81, 32979.55, 34485.02, 36173.39, 37875.83, 40070.72, 41984.21, 43982.11, 46092.58, 48217.12, 50524.56, 52958.63),
        '02': (31966.53, 32979.55, 34485.02, 36173.39, 37875.83, 39648.62, 41984.21, 43982.11, 46092.58, 48217.12, 50524.56, 52958.63, 55420.84),
        '03': (33443.85, 34485.02, 36173.39, 37875.83, 39648.62, 41519.90, 43982.11, 46092.58, 48217.12, 50524.56, 52958.63, 55420.84, 58023.75),
        '04': (36722.11, 37875.83, 39648.62, 41519.90, 43517.81, 45572.00, 48217.12, 50524.56, 52958.63, 55420.84, 58023.75, 60837.70, 63693.87),
        '05': (37327.11, 38494.90, 40309.90, 42251.53, 44249.44, 46345.84, 49047.23, 51410.96, 53802.82, 56335.38, 59064.91, 61836.66, 64735.03),
        '06': (42209.32, 43517.81, 45572.00, 47738.74, 49947.70, 52423.98, 55420.84, 58023.75, 60837.70, 63693.87, 66676.66, 69870.50, 73233.17),
        '07': (44207.23, 45572.00, 47738.74, 49947.70, 52423.98, 54843.98, 58023.75, 60837.70, 63693.87, 66676.66, 69870.50, 73233.17, 76666.20),
        '08': (46303.63, 47738.74, 49947.70, 52423.98, 54843.98, 57446.89, 60837.70, 63693.87, 66676.66, 69870.50, 73233.17, 76666.20, 80380.62),
        '09': (50820.02, 52423.98, 54843.98, 57446.89, 60232.70, 63060.73, 66676.66, 69870.50, 73233.17, 76666.20, 80380.62, 84165.39, 88133.07),
        '10': (55730.38, 57446.89, 60232.70, 63060.73, 66043.52, 69181.08, 73233.17, 76666.20, 80380.62, 84165.39, 88133.07, 92396.21, 96729.70),
        '11': (61175.38, 63060.73, 66043.52, 69181.08, 72543.76, 75906.43, 80380.62, 84165.39, 88133.07, 92396.21, 96729.70, 101344.58, 106156.45),
        '12': (67112.82, 69181.08, 72543.76, 75906.43, 79578.64, 83307.13, 88133.07, 92396.21, 96729.70, 101344.58, 106156.45, 111179.36, 116497.73),
        '13': (73613.06, 75906.43, 79578.64, 83307.13, 87260.74, 91411.32, 96729.70, 101344.58, 106156.45, 111179.36, 116497.73, 121914.59, 127795.76),
        '14': (80830.85, 83307.13, 87260.74, 91411.32, 95758.88, 100331.56, 106156.45, 111179.36, 116497.73, 121914.59, 127795.76, 133958.32, 140205.30),
        '15': (88667.72, 91411.32, 95758.88, 100331.56, 105101.21, 110067.84, 116497.73, 121914.59, 127795.76, 133958.32, 140205.30, 146902.51, 153867.05),
        '16': (97348.77, 100331.56, 105101.21, 110067.84, 115358.08, 120760.87, 127795.76, 133958.32, 140205.30, 146902.51, 153867.05, 161197.40, 168809.15),
        '17': (106747.38, 110067.84, 115358.08, 120760.87, 126515.41, 132565.41, 140205.30, 146902.51, 153867.05, 161197.40, 168809.15, 176913.34, 185172.30)
    }
    },
    'G': {
        '2023': {
            '01': [45972.0, 47388.0, 49740.0, 52092.0, 54708.0, 57636.0, 60336.0, 63504.0, 67200.0],
            '02': [50544.0, 52092.0, 54708.0, 57636.0, 60336.0, 63504.0, 66528.0, 69972.0, 74196.0],
            '03': [55908.0, 57636.0, 60336.0, 63504.0, 66528.0, 69972.0, 73392.0, 77052.0, 81816.0],
            '04': [61572.0, 63504.0, 66528.0, 69972.0, 73392.0, 77052.0, 81000.0, 85044.0, 90108.0],
            '05': [67860.0, 69972.0, 73392.0, 77052.0, 81000.0, 85044.0, 89208.0, 93804.0, 99480.0],
            '06': [74712.0, 77052.0, 81000.0, 85044.0, 89208.0, 93804.0, 98496.0, 102996.0, 108756.0],
            '07': [82500.0, 85044.0, 89208.0, 93804.0, 98496.0, 102996.0, 107652.0, 112500.0, 118632.0],
            '08': [90984.0, 93804.0, 98496.0, 102996.0, 107652.0, 112500.0, 117432.0, 122796.0, 129540.0],
            '09': [99876.0, 102996.0, 107652.0, 112500.0, 117432.0, 122796.0, 128256.0, 134028.0, 141624.0],
            '10': [109128.0, 112500.0, 117432.0, 122796.0, 128256.0, 134028.0, 140220.0, 146448.0, 150828.0]
        },
        '2024': {
            '01': [47351.16, 48809.64, 51232.2, 53654.76, 56349.24, 59365.08, 62146.08, 65409.12, 69216.0],
            '02': [52060.32, 53654.76, 56349.24, 59365.08, 62146.08, 65409.12, 68523.84, 72071.16, 76421.88],
            '03': [57585.24, 59365.08, 62146.08, 65409.12, 68523.84, 72071.16, 75593.76, 79363.56, 84270.48],
            '04': [63419.16, 65409.12, 68523.84, 72071.16, 75593.76, 79363.56, 83430.0, 87595.32, 92811.24],
            '05': [69895.8, 72071.16, 75593.76, 79363.56, 83430.0, 87595.32, 91884.24, 96618.12, 102464.4],
            '06': [76953.36, 79363.56, 83430.0, 87595.32, 91884.24, 96618.12, 101450.88, 106085.88, 112018.68],
            '07': [84975.0, 87595.32, 91884.24, 96618.12, 101450.88, 106085.88, 110881.56, 115875.0, 122190.96],
            '08': [93713.52, 96618.12, 101450.88, 106085.88, 110881.56, 115875.0, 120954.96, 126479.88, 133426.2],
            '09': [102872.28, 106085.88, 110881.56, 115875.0, 120954.96, 126479.88, 132103.68, 138048.84, 145872.72],
            '10': [112401.84, 115875.0, 120954.96, 126479.88, 132103.68, 138048.84, 144426.6, 150841.44, 155352.84]
        },
        '2025': {
            '01': [49718.72, 51250.12, 53793.81, 56337.5, 59166.7, 62333.33, 65253.38, 68679.58, 72676.8],
            '02': [54663.34, 56337.5, 59166.7, 62333.33, 65253.38, 68679.58, 71950.03, 75674.72, 80242.97],
            '03': [60464.5, 62333.33, 65253.38, 68679.58, 71950.03, 75674.72, 79373.45, 83331.74, 88484.0],
            '04': [66590.12, 68679.58, 71950.03, 75674.72, 79373.45, 83331.74, 87601.5, 91975.09, 97451.8],
            '05': [73390.59, 75674.72, 79373.45, 83331.74, 87601.5, 91975.09, 96478.45, 101449.03, 107587.62],
            '06': [80801.03, 83331.74, 87601.5, 91975.09, 96478.45, 101449.03, 106523.42, 111390.17, 117619.61],
            '07': [89223.75, 91975.09, 96478.45, 101449.03, 106523.42, 111390.17, 116425.64, 121668.75, 128300.51],
            '08': [98399.2, 101449.03, 106523.42, 111390.17, 116425.64, 121668.75, 127002.71, 132803.87, 140097.51],
            '09': [108015.89, 111390.17, 116425.64, 121668.75, 127002.71, 132803.87, 138708.86, 144951.28, 153166.36],
            '10': [118021.93, 121668.75, 127002.71, 132803.87, 138708.86, 144951.28, 151647.93, 158383.51, 163120.48]
        },
        '2026': {
            '01': [52204.65, 53812.63, 56483.5, 59154.37, 62125.04, 65450.0, 68516.05, 72113.55, 76310.64],
            '02': [57396.5, 59154.37, 62125.04, 65450.0, 68516.05, 72113.55, 75547.53, 79458.45, 84255.12],
            '03': [63487.73, 65450.0, 68516.05, 72113.55, 75547.53, 79458.45, 83342.12, 87498.32, 92908.2],
            '04': [69919.62, 72113.55, 75547.53, 79458.45, 83342.12, 87498.32, 91981.58, 96573.84, 102324.39],
            '05': [77060.12, 79458.45, 83342.12, 87498.32, 91981.58, 96573.84, 101302.37, 106521.48, 112967.0],
            '06': [84841.08, 87498.32, 91981.58, 96573.84, 101302.37, 106521.48, 111849.6, 116959.68, 123500.59],
            '07': [93684.94, 96573.84, 101302.37, 106521.48, 111849.6, 116959.68, 122246.92, 127752.19, 134715.53],
            '08': [103319.16, 106521.48, 111849.6, 116959.68, 122246.92, 127752.19, 133352.84, 139444.07, 147102.39],
            '09': [113416.69, 116959.68, 122246.92, 127752.19, 133352.84, 139444.07, 145644.31, 152198.85, 160824.67],
            '10': [123923.03, 127752.19, 133352.84, 139444.07, 145644.31, 152198.85, 159230.33, 166302.69, 171276.51]
        },
        '2027': {
            '01': [53901.31, 55561.54, 58319.21, 61076.89, 64144.1, 67577.13, 70742.82, 74457.25, 78790.74],
            '02': [59261.89, 61076.89, 64144.1, 67577.13, 70742.82, 74457.25, 78002.83, 82040.85, 86993.41],
            '03': [65551.08, 67577.13, 70742.82, 74457.25, 78002.83, 82040.85, 86050.74, 90342.02, 95927.72],
            '04': [72192.01, 74457.25, 78002.83, 82040.85, 86050.74, 90342.02, 94970.98, 99712.49, 105649.93],
            '05': [79564.57, 82040.85, 86050.74, 90342.02, 94970.98, 99712.49, 104594.7, 109983.43, 116638.43],
            '06': [87598.41, 90342.02, 94970.98, 99712.49, 104594.7, 109983.43, 115484.71, 120760.87, 127514.36],
            '07': [96729.7, 99712.49, 104594.7, 109983.43, 115484.71, 120760.87, 126219.94, 131904.13, 139093.79],
            '08': [106677.03, 109983.43, 115484.71, 120760.87, 126219.94, 131904.13, 137686.81, 143976.0, 151883.21],
            '09': [117102.73, 120760.87, 126219.94, 131904.13, 137686.81, 143976.0, 150377.75, 157145.31, 166051.48],
            '10': [127950.53, 131904.13, 137686.81, 143976.0, 150377.75, 157145.31, 164405.31, 171707.52, 176842.99]
        }
    },
    'BX': {
        '2022': {
            '01': [21912, 23016, 24060, 25212, 26412, 27960, 29280, 30672, 32136, 33636, 35244, 36924],
            '02': [23016, 24060, 25212, 26412, 27660, 29280, 30672, 32136, 33636, 35244, 36924, 38664],
            '03': [24060, 25212, 26412, 27660, 28956, 30672, 32136, 33636, 35244, 36924, 38664, 40476],
            '04': [26412, 27660, 28956, 30360, 31800, 33636, 35244, 36924, 38664, 40476, 42444, 44424],
            '05': [27660, 28956, 30360, 31800, 33300, 35244, 36924, 38664, 40476, 42444, 44424, 46500],
            '06': [30360, 31800, 33300, 34860, 36564, 38664, 40476, 42444, 44424, 46500, 48720, 51096],
            '07': [31800, 33300, 34860, 36564, 38256, 40476, 42444, 44424, 46500, 48720, 51096, 53460],
            '08': [33300, 34860, 36564, 38256, 40080, 42444, 44424, 46500, 48720, 51096, 53460, 56064],
            '09': [36564, 38256, 40080, 42024, 43980, 46500, 48720, 51096, 53460, 56064, 58692, 61476],
            '10': [40080, 42024, 43980, 46056, 48240, 51096, 53460, 56064, 58692, 61476, 64428, 67464],
            '11': [43980, 46056, 48240, 50592, 52956, 56064, 58692, 61476, 64428, 67464, 70704, 74052],
            '12': [48240, 50592, 52956, 55512, 58116, 61476, 64428, 67464, 70704, 74052, 76356, 78672],
            '13': [52956, 55512, 58116, 60876, 63780, 67464, 70704, 74052, 76356, 78672, 82368, 86328],
            '14': [58116, 60876, 63780, 66804, 69984, 74052, 76356, 78672, 82368, 86328, 90444, 94704],
            '15': [63780, 66804, 69984, 73332, 75996, 78672, 82368, 86328, 90444, 94704, 99228, 103920],
            '16': [69984, 73332, 75996, 77892, 81552, 86328, 90444, 94704, 99228, 103920, 108864, 114012],
            '17': [75996, 77892, 81552, 85452, 89532, 94704, 99228, 103920, 108864, 114012, 119436, 125088],
            '18': [81552, 85452, 89532, 93756, 98220, 103920, 108864, 114012, 119436, 125088, 131064, 131064],
            '19': [89532, 93756, 98220, 103920, 108864, 114012, 119436, 125088, 131064, 131064, 131064, 131064],
            '20': [93756, 98220, 102900, 107784, 114012, 119436, 125088, 131064, 131064, 131064, 131064, 131064],
            '21': [98220, 102900, 107784, 112884, 118248, 125088, 131064, 131064, 131064, 131064, 131064, 131064]
        },
        '2023': {
            '01': [22569.36, 23706.48, 24781.8, 25968.36, 27204.36, 28798.8, 30158.4, 31592.16, 33100.08, 34645.08, 36301.32, 38031.72],
            '02': [23706.48, 24781.8, 25968.36, 27204.36, 28489.8, 30158.4, 31592.16, 33100.08, 34645.08, 36301.32, 38031.72, 39823.92],
            '03': [24781.8, 25968.36, 27204.36, 28489.8, 29824.68, 31592.16, 33100.08, 34645.08, 36301.32, 38031.72, 39823.92, 41690.28],
            '04': [27204.36, 28489.8, 29824.68, 31270.8, 32754, 34645.08, 36301.32, 38031.72, 39823.92, 41690.28, 43717.32, 45756.72],
            '05': [28489.8, 29824.68, 31270.8, 32754, 34299, 36301.32, 38031.72, 39823.92, 41690.28, 43717.32, 45756.72, 47895],
            '06': [31270.8, 32754, 34299, 35905.8, 37660.92, 39823.92, 41690.28, 43717.32, 45756.72, 47895, 50181.6, 52628.88],
            '07': [32754, 34299, 35905.8, 37660.92, 39403.68, 41690.28, 43717.32, 45756.72, 47895, 50181.6, 52628.88, 55063.8],
            '08': [34299, 35905.8, 37660.92, 39403.68, 41282.4, 43717.32, 45756.72, 47895, 50181.6, 52628.88, 55063.8, 57745.92],
            '09': [37660.92, 39403.68, 41282.4, 43284.72, 45299.4, 47895, 50181.6, 52628.88, 55063.8, 57745.92, 60452.76, 63320.28],
            '10': [41282.4, 43284.72, 45299.4, 47437.68, 49687.2, 52628.88, 55063.8, 57745.92, 60452.76, 63320.28, 66360.84, 69487.92],
            '11': [45299.4, 47437.68, 49687.2, 52109.76, 54544.68, 57745.92, 60452.76, 63320.28, 66360.84, 69487.92, 72825.12, 76273.56],
            '12': [49687.2, 52109.76, 54544.68, 57177.36, 59859.48, 63320.28, 66360.84, 69487.92, 72825.12, 76273.56, 78646.68, 81032.16],
            '13': [54544.68, 57177.36, 59859.48, 62702.28, 65693.4, 69487.92, 72825.12, 76273.56, 78646.68, 81032.16, 84839.04, 88917.84],
            '14': [59859.48, 62702.28, 65693.4, 68808.12, 72083.52, 76273.56, 78646.68, 81032.16, 84839.04, 88917.84, 93157.32, 97545.12],
            '15': [65693.4, 68808.12, 72083.52, 75531.96, 78275.88, 81032.16, 84839.04, 88917.84, 93157.32, 97545.12, 102204.84, 107037.6],
            '16': [72083.52, 75531.96, 78275.88, 80228.76, 83998.56, 88917.84, 93157.32, 97545.12, 102204.84, 107037.6, 112129.92, 117432.36],
            '17': [78275.88, 80228.76, 83998.56, 88015.56, 92217.96, 97545.12, 102204.84, 107037.6, 112129.92, 117432.36, 123019.08, 128840.64],
            '18': [83998.56, 88015.56, 92217.96, 96568.68, 101166.6, 107037.6, 112129.92, 117432.36, 123019.08, 128840.64, 134995.92, 134995.92],
            '19': [92217.96, 96568.68, 101166.6, 107037.6, 112129.92, 117432.36, 123019.08, 128840.64, 134995.92, 134995.92, 134995.92, 134995.92],
            '20': [96568.68, 101166.6, 105987, 111017.52, 117432.36, 123019.08, 128840.64, 134995.92, 134995.92, 134995.92, 134995.92, 134995.92],
            '21': [101166.6, 105987, 111017.52, 116270.52, 121795.44, 128840.64, 134995.92, 134995.92, 134995.92, 134995.92, 134995.92, 134995.92]
        },
        '2024': {
            '01': [23246.4408, 24417.6744, 25525.254, 26747.4108, 28020.4908, 29662.764, 31063.152, 32539.9248, 34093.0824, 35684.4324, 37390.3596, 39172.6716],
            '02': [24417.6744, 25525.254, 26747.4108, 28020.4908, 29344.494, 31063.152, 32539.9248, 34093.0824, 35684.4324, 37390.3596, 39172.6716, 41018.6376],
            '03': [25525.254, 26747.4108, 28020.4908, 29344.494, 30719.4204, 32539.9248, 34093.0824, 35684.4324, 37390.3596, 39172.6716, 41018.6376, 42940.9884],
            '04': [28020.4908, 29344.494, 30719.4204, 32208.924, 33736.62, 35684.4324, 37390.3596, 39172.6716, 41018.6376, 42940.9884, 45028.8396, 47129.4216],
            '05': [29344.494, 30719.4204, 32208.924, 33736.62, 35327.97, 37390.3596, 39172.6716, 41018.6376, 42940.9884, 45028.8396, 47129.4216, 49331.85],
            '06': [32208.924, 33736.62, 35327.97, 36982.974, 38790.7476, 41018.6376, 42940.9884, 45028.8396, 47129.4216, 49331.85, 51687.048, 54207.7464],
            '07': [33736.62, 35327.97, 36982.974, 38790.7476, 40585.7904, 42940.9884, 45028.8396, 47129.4216, 49331.85, 51687.048, 54207.7464, 56715.714],
            '08': [35327.97, 36982.974, 38790.7476, 40585.7904, 42520.872, 45028.8396, 47129.4216, 49331.85, 51687.048, 54207.7464, 56715.714, 59478.2976],
            '09': [38790.7476, 40585.7904, 42520.872, 44583.2616, 46658.382, 49331.85, 51687.048, 54207.7464, 56715.714, 59478.2976, 62266.3428, 65219.8884],
            '10': [42520.872, 44583.2616, 46658.382, 48860.8104, 51177.816, 54207.7464, 56715.714, 59478.2976, 62266.3428, 65219.8884, 68351.6652, 71572.5576],
            '11': [46658.382, 48860.8104, 51177.816, 53673.0528, 56181.0204, 59478.2976, 62266.3428, 65219.8884, 68351.6652, 71572.5576, 75009.8736, 78561.7668],
            '12': [51177.816, 53673.0528, 56181.0204, 58892.6808, 61655.2644, 65219.8884, 68351.6652, 71572.5576, 75009.8736, 78561.7668, 81006.0804, 83463.1248],
            '13': [56181.0204, 58892.6808, 61655.2644, 64583.3484, 67664.202, 71572.5576, 75009.8736, 78561.7668, 81006.0804, 83463.1248, 87384.2112, 91585.3752],
            '14': [61655.2644, 64583.3484, 67664.202, 70872.3636, 74246.0256, 78561.7668, 81006.0804, 83463.1248, 87384.2112, 91585.3752, 95952.0396, 100471.4736],
            '15': [67664.202, 70872.3636, 74246.0256, 77797.9188, 80624.1564, 83463.1248, 87384.2112, 91585.3752, 95952.0396, 100471.4736, 105270.9852, 110248.728],
            '16': [74246.0256, 77797.9188, 80624.1564, 82635.6228, 86518.5168, 91585.3752, 95952.0396, 100471.4736, 105270.9852, 110248.728, 115493.8176, 120955.3308],
            '17': [80624.1564, 82635.6228, 86518.5168, 90656.0268, 94984.4988, 100471.4736, 105270.9852, 110248.728, 115493.8176, 120955.3308, 126709.6524, 132705.8592],
            '18': [86518.5168, 90656.0268, 94984.4988, 99465.7404, 104201.598, 110248.728, 115493.8176, 120955.3308, 126709.6524, 132705.8592, 139045.7976, 139045.7976],
            '19': [94984.4988, 99465.7404, 104201.598, 110248.728, 115493.8176, 120955.3308, 126709.6524, 132705.8592, 139045.7976, 139045.7976, 139045.7976, 139045.7976],
            '20': [99465.7404, 104201.598, 109166.61, 114348.0456, 120955.3308, 126709.6524, 132705.8592, 139045.7976, 139045.7976, 139045.7976, 139045.7976, 139045.7976],
            '21': [104201.598, 109166.61, 114348.0456, 119758.6356, 125449.3032, 132705.8592, 139045.7976, 139045.7976, 139045.7976, 139045.7976, 139045.7976, 139045.7976]
        },
        '2025': {
            '01': [23943.83402, 25150.20463, 26291.01162, 27549.83312, 28861.10552, 30552.64692, 31995.04656, 33516.12254, 35115.87487, 36754.96537, 38512.07039, 40347.85175],
            '02': [25150.20463, 26291.01162, 27549.83312, 28861.10552, 30224.82882, 31995.04656, 33516.12254, 35115.87487, 36754.96537, 38512.07039, 40347.85175, 42249.19673],
            '03': [26291.01162, 27549.83312, 28861.10552, 30224.82882, 31641.00301, 33516.12254, 35115.87487, 36754.96537, 38512.07039, 40347.85175, 42249.19673, 44229.21805],
            '04': [28861.10552, 30224.82882, 31641.00301, 33175.19172, 34748.7186, 36754.96537, 38512.07039, 40347.85175, 42249.19673, 44229.21805, 46379.70479, 48543.30425],
            '05': [30224.82882, 31641.00301, 33175.19172, 34748.7186, 36387.8091, 38512.07039, 40347.85175, 42249.19673, 44229.21805, 46379.70479, 48543.30425, 50811.8055],
            '06': [33175.19172, 34748.7186, 36387.8091, 38092.46322, 39954.47003, 42249.19673, 44229.21805, 46379.70479, 48543.30425, 50811.8055, 53237.65944, 55833.97879],
            '07': [34748.7186, 36387.8091, 38092.46322, 39954.47003, 41803.36411, 44229.21805, 46379.70479, 48543.30425, 50811.8055, 53237.65944, 55833.97879, 58417.18542],
            '08': [36387.8091, 38092.46322, 39954.47003, 41803.36411, 43796.49816, 46379.70479, 48543.30425, 50811.8055, 53237.65944, 55833.97879, 58417.18542, 61262.64653],
            '09': [39954.47003, 41803.36411, 43796.49816, 45920.75945, 48058.13346, 50811.8055, 53237.65944, 55833.97879, 58417.18542, 61262.64653, 64134.33308, 67176.48505],
            '10': [43796.49816, 45920.75945, 48058.13346, 50326.63471, 52713.15048, 55833.97879, 58417.18542, 61262.64653, 64134.33308, 67176.48505, 70402.21516, 73719.73433],
            '11': [48058.13346, 50326.63471, 52713.15048, 55283.24438, 57866.45101, 61262.64653, 64134.33308, 67176.48505, 70402.21516, 73719.73433, 77260.16981, 80918.6198],
            '12': [52713.15048, 55283.24438, 57866.45101, 60659.46122, 63504.92233, 67176.48505, 70402.21516, 73719.73433, 77260.16981, 80918.6198, 83436.26281, 85967.01854],
            '13': [57866.45101, 60659.46122, 63504.92233, 66520.84885, 69694.12806, 73719.73433, 77260.16981, 80918.6198, 83436.26281, 85967.01854, 90005.73754, 94332.93646],
            '14': [63504.92233, 66520.84885, 69694.12806, 72998.53451, 76473.40637, 80918.6198, 83436.26281, 85967.01854, 90005.73754, 94332.93646, 98830.60079, 103485.6178],
            '15': [69694.12806, 72998.53451, 76473.40637, 80131.85636, 83042.88109, 85967.01854, 90005.73754, 94332.93646, 98830.60079, 103485.6178, 108429.1148, 113556.1898],
            '16': [76473.40637, 80131.85636, 83042.88109, 85114.69148, 89114.0723, 94332.93646, 98830.60079, 103485.6178, 108429.1148, 113556.1898, 118958.6321, 124583.9907],
            '17': [83042.88109, 85114.69148, 89114.0723, 93375.7076, 97834.03376, 103485.6178, 108429.1148, 113556.1898, 118958.6321, 124583.9907, 130510.942, 136687.035],
            '18': [89114.0723, 93375.7076, 97834.03376, 102449.7126, 107327.6459, 113556.1898, 118958.6321, 124583.9907, 130510.942, 136687.035, 143217.1715, 143217.1715],
            '19': [97834.03376, 102449.7126, 107327.6459, 113556.1898, 118958.6321, 124583.9907, 130510.942, 136687.035, 143217.1715, 143217.1715, 143217.1715, 143217.1715],
            '20': [102449.7126, 107327.6459, 112441.6083, 117778.487, 124583.9907, 130510.942, 136687.035, 143217.1715, 143217.1715, 143217.1715, 143217.1715, 143217.1715],
            '21': [107327.6459, 112441.6083, 117778.487, 123351.3947, 129212.7823, 136687.035, 143217.1715, 143217.1715, 143217.1715, 143217.1715, 143217.1715, 143217.1715]
        },
        '2026': {
            '01': [24662.14904, 25904.71077, 27079.74197, 28376.32812, 29726.93869, 31469.22633, 32954.89796, 34521.60622, 36169.35112, 37857.61433, 39667.4325, 41558.2873],
            '02': [25904.71077, 27079.74197, 28376.32812, 29726.93869, 31131.57368, 32954.89796, 34521.60622, 36169.35112, 37857.61433, 39667.4325, 41558.2873, 43516.67263],
            '03': [27079.74197, 28376.32812, 29726.93869, 31131.57368, 32590.2331, 34521.60622, 36169.35112, 37857.61433, 39667.4325, 41558.2873, 43516.67263, 45556.09459],
            '04': [29726.93869, 31131.57368, 32590.2331, 34170.44747, 35791.18016, 37857.61433, 39667.4325, 41558.2873, 43516.67263, 45556.09459, 47771.09593, 49999.60338],
            '05': [31131.57368, 32590.2331, 34170.44747, 35791.18016, 37479.44337, 39667.4325, 41558.2873, 43516.67263, 45556.09459, 47771.09593, 49999.60338, 52336.15967],
            '06': [34170.44747, 35791.18016, 37479.44337, 39235.23712, 41153.10413, 43516.67263, 45556.09459, 47771.09593, 49999.60338, 52336.15967, 54834.78922, 57508.99816],
            '07': [35791.18016, 37479.44337, 39235.23712, 41153.10413, 43057.46504, 45556.09459, 47771.09593, 49999.60338, 52336.15967, 54834.78922, 57508.99816, 60169.70098],
            '08': [37479.44337, 39235.23712, 41153.10413, 43057.46504, 45110.3931, 47771.09593, 49999.60338, 52336.15967, 54834.78922, 57508.99816, 60169.70098, 63100.52592],
            '09': [41153.10413, 43057.46504, 45110.3931, 47298.38223, 49499.87746, 52336.15967, 54834.78922, 57508.99816, 60169.70098, 63100.52592, 66058.36308, 69191.7796],
            '10': [45110.3931, 47298.38223, 49499.87746, 51836.43375, 54294.54499, 57508.99816, 60169.70098, 63100.52592, 66058.36308, 69191.7796, 72514.28161, 75931.32636],
            '11': [49499.87746, 51836.43375, 54294.54499, 56941.74172, 59602.44454, 63100.52592, 66058.36308, 69191.7796, 72514.28161, 75931.32636, 79577.9749, 83346.1784],
            '12': [54294.54499, 56941.74172, 59602.44454, 62479.24506, 65410.07, 69191.7796, 72514.28161, 75931.32636, 79577.9749, 83346.1784, 85939.3507, 88546.0291],
            '13': [59602.44454, 62479.24506, 65410.07, 68516.47432, 71784.9519, 75931.32636, 79577.9749, 83346.1784, 85939.3507, 88546.0291, 92705.90966, 97162.92455],
            '14': [65410.07, 68516.47432, 71784.9519, 75188.49054, 78767.60856, 83346.1784, 85939.3507, 88546.0291, 92705.90966, 97162.92455, 101795.5188, 106590.1863],
            '15': [71784.9519, 75188.49054, 78767.60856, 82535.81205, 85534.16752, 88546.0291, 92705.90966, 97162.92455, 101795.5188, 106590.1863, 111681.9882, 116962.8755],
            '16': [78767.60856, 82535.81205, 85534.16752, 87668.13223, 91787.49447, 97162.92455, 101795.5188, 106590.1863, 111681.9882, 116962.8755, 122527.3911, 128321.5104],
            '17': [85534.16752, 87668.13223, 91787.49447, 96176.97883, 100769.0548, 106590.1863, 111681.9882, 116962.8755, 122527.3911, 128321.5104, 134426.2702, 140787.646],
            '18': [91787.49447, 96176.97883, 100769.0548, 105523.204, 110547.4753, 116962.8755, 122527.3911, 128321.5104, 134426.2702, 140787.646, 147513.6867, 147513.6867],
            '19': [100769.0548, 105523.204, 110547.4753, 116962.8755, 122527.3911, 128321.5104, 134426.2702, 140787.646, 147513.6867, 147513.6867, 147513.6867, 147513.6867],
            '20': [105523.204, 110547.4753, 115814.8565, 121311.8416, 128321.5104, 134426.2702, 140787.646, 147513.6867, 147513.6867, 147513.6867, 147513.6867, 147513.6867],
            '21': [110547.4753, 115814.8565, 121311.8416, 127051.9365, 133089.1658, 140787.646, 147513.6867, 147513.6867, 147513.6867, 147513.6867, 147513.6867, 147513.6867]
        },
        '2027': {
            '01': [25402.01352, 26681.85209, 27892.13423, 29227.61796, 30618.74685, 32413.30312, 33943.5449, 35557.25441, 37254.43165, 38993.34276, 40857.45547, 42805.03592],
            '02': [26681.85209, 27892.13423, 29227.61796, 30618.74685, 32065.5209, 33943.5449, 35557.25441, 37254.43165, 38993.34276, 40857.45547, 42805.03592, 44822.17281],
            '03': [27892.13423, 29227.61796, 30618.74685, 32065.5209, 33567.9401, 35557.25441, 37254.43165, 38993.34276, 40857.45547, 42805.03592, 44822.17281, 46922.77743],
            '04': [30618.74685, 32065.5209, 33567.9401, 35195.5609, 36864.91556, 38993.34276, 40857.45547, 42805.03592, 44822.17281, 46922.77743, 49204.22881, 51499.59148],
            '05': [32065.5209, 33567.9401, 35195.5609, 36864.91556, 38603.82667, 40857.45547, 42805.03592, 44822.17281, 46922.77743, 49204.22881, 51499.59148, 53906.24445],
            '06': [35195.5609, 36864.91556, 38603.82667, 40412.29423, 42387.69725, 44822.17281, 46922.77743, 49204.22881, 51499.59148, 53906.24445, 56479.8329, 59234.2681],
            '07': [36864.91556, 38603.82667, 40412.29423, 42387.69725, 44349.18899, 46922.77743, 49204.22881, 51499.59148, 53906.24445, 56479.8329, 59234.2681, 61974.79201],
            '08': [38603.82667, 40412.29423, 42387.69725, 44349.18899, 46463.7049, 49204.22881, 51499.59148, 53906.24445, 56479.8329, 59234.2681, 61974.79201, 64993.5417],
            '09': [42387.69725, 44349.18899, 46463.7049, 48717.3337, 50984.87379, 53906.24445, 56479.8329, 59234.2681, 61974.79201, 64993.5417, 68040.11397, 71267.53299],
            '10': [46463.7049, 48717.3337, 50984.87379, 53391.52677, 55923.38134, 59234.2681, 61974.79201, 64993.5417, 68040.11397, 71267.53299, 74689.71006, 78209.26615],
            '11': [50984.87379, 53391.52677, 55923.38134, 58649.99397, 61390.51788, 64993.5417, 68040.11397, 71267.53299, 74689.71006, 78209.26615, 81965.31415, 85846.56375],
            '12': [55923.38134, 58649.99397, 61390.51788, 64353.62241, 67372.3721, 71267.53299, 74689.71006, 78209.26615, 81965.31415, 85846.56375, 88517.53122, 91202.40997],
            '13': [61390.51788, 64353.62241, 67372.3721, 70571.96855, 73938.50046, 78209.26615, 81965.31415, 85846.56375, 88517.53122, 91202.40997, 95487.08695, 100077.8123],
            '14': [67372.3721, 70571.96855, 73938.50046, 77444.14526, 81130.63682, 85846.56375, 88517.53122, 91202.40997, 95487.08695, 100077.8123, 104849.3844, 109787.8919],
            '15': [73938.50046, 77444.14526, 81130.63682, 85011.88642, 88100.19255, 91202.40997, 95487.08695, 100077.8123, 104849.3844, 109787.8919, 115032.4478, 120471.7618],
            '16': [81130.63682, 85011.88642, 88100.19255, 90298.1762, 94541.11931, 100077.8123, 104849.3844, 109787.8919, 115032.4478, 120471.7618, 126203.2128, 132171.1558],
            '17': [88100.19255, 90298.1762, 94541.11931, 99062.2882, 103792.1264, 109787.8919, 115032.4478, 120471.7618, 126203.2128, 132171.1558, 138459.0583, 145011.2754],
            '18': [94541.11931, 99062.2882, 103792.1264, 108688.9001, 113863.8996, 120471.7618, 126203.2128, 132171.1558, 138459.0583, 145011.2754, 151939.0973, 151939.0973],
            '19': [103792.1264, 108688.9001, 113863.8996, 120471.7618, 126203.2128, 132171.1558, 138459.0583, 145011.2754, 151939.0973, 151939.0973, 151939.0973, 151939.0973],
            '20': [108688.9001, 113863.8996, 119289.3022, 124951.1968, 132171.1558, 138459.0583, 145011.2754, 151939.0973, 151939.0973, 151939.0973, 151939.0973, 151939.0973],
            '21': [113863.8996, 119289.3022, 124951.1968, 130863.4946, 137081.8407, 145011.2754, 151939.0973, 151939.0973, 151939.0973, 151939.0973, 151939.0973, 151939.0973]
        }
    },
    'GY': {
        '2022': {
            '01': [38748, 40680, 42612, 44736, 47124, 49356, 51900, 54960],
            '02': [42612, 44736, 47124, 49356, 51900, 54420, 57204, 60660],
            '03': [47124, 49356, 51900, 54420, 57204, 60048, 63012, 66900],
            '04': [51900, 54420, 57204, 60048, 63012, 66228, 69564, 73680],
            '05': [57204, 60048, 63012, 66228, 69564, 72960, 75852, 78780],
            '06': [63012, 66228, 69564, 72960, 75852, 78000, 81552, 86112],
            '07': [69564, 72960, 75852, 78000, 81552, 85248, 89076, 93936],
            '08': [75852, 78000, 81552, 85248, 89076, 93000, 97260, 102576],
            '09': [81552, 85248, 89076, 93000, 97260, 101580, 106152, 112164],
            '10': [89076, 93000, 97260, 101580, 106152, 111024, 115992, 119400],
            '11': [97260, 101580, 106152, 111024, 115992, 118200, 123540, 129144],
            '12': [106152, 111024, 115992, 120000, 124224, 128580, 132480, 137832]
        },
        '2023': {
            '01': [39910.44, 41900.4, 43890.36, 46078.08, 48537.72, 50836.68, 53457, 56608.8],
            '02': [43890.36, 46078.08, 48537.72, 50836.68, 53457, 56052.6, 58920.12, 62479.8],
            '03': [48537.72, 50836.68, 53457, 56052.6, 58920.12, 61849.44, 64902.36, 68907],
            '04': [53457, 56052.6, 58920.12, 61849.44, 64902.36, 68214.84, 71650.92, 75890.4],
            '05': [58920.12, 61849.44, 64902.36, 68214.84, 71650.92, 75148.8, 78127.56, 81143.4],
            '06': [64902.36, 68214.84, 71650.92, 75148.8, 78127.56, 80340, 83998.56, 88695.36],
            '07': [71650.92, 75148.8, 78127.56, 80340, 83998.56, 87805.44, 91748.28, 96754.08],
            '08': [78127.56, 80340, 83998.56, 87805.44, 91748.28, 95790, 100177.8, 105653.28],
            '09': [83998.56, 87805.44, 91748.28, 95790, 100177.8, 104627.4, 109336.56, 115528.92],
            '10': [91748.28, 95790, 100177.8, 104627.4, 109336.56, 114354.72, 119471.76, 122982],
            '11': [100177.8, 104627.4, 109336.56, 114354.72, 119471.76, 121746, 127246.2, 133018.32],
            '12': [109336.56, 114354.72, 119471.76, 123600, 127950.72, 132437.4, 136454.4, 141966.96]
        },
        '2024': {
            '01': [41107.7532, 43157.412, 45207.0708, 47460.4224, 49993.8516, 52361.7804, 55060.71, 58307.064],
            '02': [45207.0708, 47460.4224, 49993.8516, 52361.7804, 55060.71, 57734.178, 60687.7236, 64354.194],
            '03': [49993.8516, 52361.7804, 55060.71, 57734.178, 60687.7236, 63704.9232, 66849.4308, 70974.21],
            '04': [55060.71, 57734.178, 60687.7236, 63704.9232, 66849.4308, 70261.2852, 73800.4476, 78167.112],
            '05': [60687.7236, 63704.9232, 66849.4308, 70261.2852, 73800.4476, 77403.264, 80471.3868, 83577.702],
            '06': [66849.4308, 70261.2852, 73800.4476, 77403.264, 80471.3868, 82750.2, 86518.5168, 91356.2208],
            '07': [73800.4476, 77403.264, 80471.3868, 82750.2, 86518.5168, 90439.6032, 94500.7284, 99656.7024],
            '08': [80471.3868, 82750.2, 86518.5168, 90439.6032, 94500.7284, 98663.7, 103183.134, 108822.8784],
            '09': [86518.5168, 90439.6032, 94500.7284, 98663.7, 103183.134, 107766.222, 112616.6568, 118994.7876],
            '10': [94500.7284, 98663.7, 103183.134, 107766.222, 112616.6568, 117785.3616, 123055.9128, 126671.46],
            '11': [103183.134, 107766.222, 112616.6568, 117785.3616, 123055.9128, 125398.38, 131063.586, 137008.8696],
            '12': [112616.6568, 117785.3616, 123055.9128, 127308, 131789.2416, 136410.522, 140548.032, 146225.9688]
        },
        '2025': {
            '01': [42340.9858, 44452.13436, 46563.28292, 48884.23507, 51493.66715, 53932.63381, 56712.5313, 60056.27592],
            '02': [46563.28292, 48884.23507, 51493.66715, 53932.63381, 56712.5313, 59466.20334, 62508.35531, 66284.81982],
            '03': [51493.66715, 53932.63381, 56712.5313, 59466.20334, 62508.35531, 65616.0709, 68854.91372, 73103.4363],
            '04': [56712.5313, 59466.20334, 62508.35531, 65616.0709, 68854.91372, 72369.12376, 76014.46103, 80512.12536],
            '05': [62508.35531, 65616.0709, 68854.91372, 72369.12376, 76014.46103, 79725.36192, 82885.5284, 86085.03306],
            '06': [68854.91372, 72369.12376, 76014.46103, 79725.36192, 82885.5284, 85232.706, 89114.0723, 94096.90742],
            '07': [76014.46103, 79725.36192, 82885.5284, 85232.706, 89114.0723, 93152.7913, 97335.75025, 102646.4035],
            '08': [82885.5284, 85232.706, 89114.0723, 93152.7913, 97335.75025, 101623.611, 106278.628, 112087.5648],
            '09': [89114.0723, 93152.7913, 97335.75025, 101623.611, 106278.628, 110999.2087, 115995.1565, 122564.6312],
            '10': [97335.75025, 101623.611, 106278.628, 110999.2087, 115995.1565, 121318.9224, 126747.5902, 130471.6038],
            '11': [106278.628, 110999.2087, 115995.1565, 121318.9224, 126747.5902, 129160.3314, 134995.4936, 141119.1357],
            '12': [115995.1565, 121318.9224, 126747.5902, 131127.24, 135742.9188, 140502.8377, 144764.473, 150612.7479]
        },
        '2026': {
            '01': [43611.21537, 45785.69839, 47960.18141, 50350.76212, 53038.47716, 55550.61283, 58413.90724, 61857.9642],
            '02': [47960.18141, 50350.76212, 53038.47716, 55550.61283, 58413.90724, 61250.18944, 64383.60597, 68273.36441],
            '03': [53038.47716, 55550.61283, 58413.90724, 61250.18944, 64383.60597, 67584.55302, 70920.56114, 75296.53939],
            '04': [58413.90724, 61250.18944, 64383.60597, 67584.55302, 70920.56114, 74540.19747, 78294.89486, 82927.48912],
            '05': [64383.60597, 67584.55302, 70920.56114, 74540.19747, 78294.89486, 82117.12278, 85372.09426, 88667.58405],
            '06': [70920.56114, 74540.19747, 78294.89486, 82117.12278, 85372.09426, 87789.68718, 91787.49447, 96919.81465],
            '07': [78294.89486, 82117.12278, 85372.09426, 87789.68718, 91787.49447, 95947.37503, 100255.8228, 105725.7956],
            '08': [85372.09426, 87789.68718, 91787.49447, 95947.37503, 100255.8228, 104672.3193, 109466.9869, 115450.1917],
            '09': [91787.49447, 95947.37503, 100255.8228, 104672.3193, 109466.9869, 114329.1849, 119475.0112, 126241.5702],
            '10': [100255.8228, 104672.3193, 109466.9869, 114329.1849, 119475.0112, 124958.4901, 130550.0179, 134385.7519],
            '11': [109466.9869, 114329.1849, 119475.0112, 124958.4901, 130550.0179, 133035.1413, 139045.3584, 145352.7098],
            '12': [119475.0112, 124958.4901, 130550.0179, 135061.0572, 139815.2064, 144717.9228, 149107.4071, 155131.1303]
        },
        '2027': {
            '01': [44919.55183, 47159.26934, 49398.98685, 51861.28499, 54629.63148, 57217.13121, 60166.32446, 63713.70312],
            '02': [49398.98685, 51861.28499, 54629.63148, 57217.13121, 60166.32446, 63087.69512, 66315.11415, 70321.56535],
            '03': [54629.63148, 57217.13121, 60166.32446, 63087.69512, 66315.11415, 69612.08961, 73048.17797, 77555.43557],
            '04': [60166.32446, 63087.69512, 66315.11415, 69612.08961, 73048.17797, 76776.40339, 80643.7417, 85415.31379],
            '05': [66315.11415, 69612.08961, 73048.17797, 76776.40339, 80643.7417, 84580.63646, 87933.25708, 91327.61157],
            '06': [73048.17797, 76776.40339, 80643.7417, 84580.63646, 87933.25708, 90423.3778, 94541.11931, 99827.40909],
            '07': [80643.7417, 84580.63646, 87933.25708, 90423.3778, 94541.11931, 98825.79629, 103263.4974, 108897.5694],
            '08': [87933.25708, 90423.3778, 94541.11931, 98825.79629, 103263.4974, 107812.4889, 112750.9965, 118913.6974],
            '09': [94541.11931, 98825.79629, 103263.4974, 107812.4889, 112750.9965, 117759.0605, 123059.2615, 130028.8173],
            '10': [103263.4974, 107812.4889, 112750.9965, 117759.0605, 123059.2615, 128707.2448, 134466.5184, 138417.3245],
            '11': [112750.9965, 117759.0605, 123059.2615, 128707.2448, 134466.5184, 137026.1956, 143216.7191, 149713.2911],
            '12': [123059.2615, 128707.2448, 134466.5184, 139112.8889, 144009.6626, 149059.4605, 153580.6294, 159785.0642]
        }
    }
}


class PersonnelBXGY:
    def __init__(self, position_name, grade, schedule, step, start_date, end_date):
        self.position_name = position_name
        self.grade = grade
        self.schedule = schedule
        self.step = step
        self.start_date = datetime.strptime(start_date, '%m/%d/%Y')
        self.end_date = datetime.strptime(end_date, '%m/%d/%Y')
        self.salary_table = self.generate_hash_table()
        self.cola_month = ["August 2023", "August 2024",
                           "August 2025", "August 2026", "August 2027"]
        self.step_increase_date = None
        self.determine_step_increase_date()
        self.step_up_dates = []
        self.generate_step_up_dates()

    def generate_hash_table(self):
        hash_table = {}
        current_date = self.start_date

        while current_date < self.end_date:
            month_year = current_date.strftime('%B %Y')
            hash_table[month_year] = []
            # Add one month to the current date
            if current_date.month == 12:
                current_date = datetime(current_date.year + 1, 1, 1)
            else:
                current_date = datetime(
                    current_date.year, current_date.month + 1, 1)

        return hash_table

    def determine_step_increase_date(self):
        # Calculate 6 months from the start date
        if self.start_date.month <= 6:
            self.step_increase_date = datetime(
                self.start_date.year, self.start_date.month + 6, self.start_date.day)
        else:
            self.step_increase_date = datetime(
                self.start_date.year + 1, self.start_date.month - 6, self.start_date.day)
        self.step_increase_month = self.step_increase_date.strftime('%B %Y')

    def generate_step_up_dates(self):
        # Initialize the first step up date as one year from step_increase_date
        step_up_date = datetime(self.step_increase_date.year + 1,
                                self.step_increase_date.month, self.step_increase_date.day)

        # Continue calculating the subsequent step up dates until the end date
        while step_up_date <= self.end_date:
            self.step_up_dates.append(step_up_date.strftime('%B %Y'))
            step_up_date = datetime(
                step_up_date.year + 1, step_up_date.month, step_up_date.day)

    def populate_salary_table(self, salary_schedule):
        current_step = 0

        # Get the start year from datetime
        year = self.start_date.year
        annual_salary = salary_schedule[self.schedule][str(
            year)][self.grade][current_step]

        for month_year_str, _ in self.salary_table.items():
            # Convert month_year_str to a datetime object for comparison if it's a string.
            # This is just an example, adjust it based on your actual month_year format.
            month_year = datetime.strptime(
                month_year_str, '%B %Y').strftime('%B %Y')

            # Check if month_year is the COLA increase month
            if month_year in self.cola_month:
                year += 1
                annual_salary = salary_schedule[self.schedule][str(
                    year)][self.grade][current_step]

            # Calculate monthly salary
            monthly_salary = annual_salary / 12

            # Check if month_year is the 6-month step up
            if month_year == self.step_increase_month:
                current_step += 1
                annual_salary = salary_schedule[self.schedule][str(
                    year)][self.grade][current_step]
                monthly_salary = annual_salary / 12

            # Check if month_year is in the 12-month step ups
            if month_year in self.step_up_dates:
                current_step += 1
                annual_salary = salary_schedule[self.schedule][str(
                    year)][self.grade][current_step]
                monthly_salary = annual_salary / 12

            # Update the salary_table for the current month_year
            self.salary_table[month_year_str] = [
                round(monthly_salary, 2), self.schedule, self.grade, current_step]

    def annual_salaries(self):
        annual_salaries = {}
        current_year_start = self.start_date
        current_year_end = current_year_start + relativedelta(years=1, days=-1)

        while current_year_start <= self.end_date:
            annual_salary = 0
            for month_year in self.salary_table:
                date = datetime.strptime(month_year, '%B %Y')
                if current_year_start <= date <= current_year_end:
                    annual_salary += self.salary_table[month_year][0]
            year_range = f'{current_year_start.strftime("%B %Y")} to {current_year_end.strftime("%B %Y")}'
            annual_salaries[year_range] = round(annual_salary, 2)
            current_year_start += relativedelta(years=1)
            current_year_end += relativedelta(years=1)

        return annual_salaries

    def average_annual_salary(self):
        annual_salaries = self.annual_salaries()
        total_salary = sum(annual_salaries.values())
        avg_annual_salary = total_salary / len(annual_salaries)
        return round(avg_annual_salary, 2)

    def calculate_annual_fringe_cost(self):
        average_annual_salary = self.average_annual_salary()
        fringe_cost = average_annual_salary * 0.6524
        return round(fringe_cost, 2)

    def calculate_annual_indirect_cost(self):
        average_annual_salary = self.average_annual_salary()
        fringe_cost = self.calculate_annual_fringe_cost()
        indirect_cost = (average_annual_salary + fringe_cost) * 0.349
        return round(indirect_cost, 2)


class Personnel:
    def __init__(self, position_name, grade, schedule, step, start_date, end_date):
        self.position_name = position_name
        self.grade = grade
        self.schedule = schedule
        self.step = step
        self.start_date = datetime.strptime(start_date, '%m/%d/%Y')
        self.end_date = datetime.strptime(end_date, '%m/%d/%Y')
        self.salary_steps = self.generate_salary_steps()
        self.salary_table = self.generate_hash_table()
        self.eligible_for_regrade = self.check_eligible_for_regrade()
        self.regrade_date = None

    def generate_salary_steps(self):
        # Initialize the salary steps with step 0
        salary_steps = [{"step": 0, "date": self.start_date}]

        # Determine the first eligible step increase date (6 months after the start date)
        next_step_date = self.start_date + relativedelta(months=6)

        # Keep adding step increase dates until the end date is reached
        while next_step_date < self.end_date:
            salary_steps.append(
                {"step": len(salary_steps), "date": next_step_date})
            # Increase step date by 12 months for subsequent steps
            next_step_date += relativedelta(years=1)

        return salary_steps

    def generate_hash_table(self):
        hash_table = {}
        current_date = self.start_date

        while current_date < self.end_date:
            month_year = current_date.strftime('%B %Y')
            hash_table[month_year] = []
            # Add one month to the current date
            if current_date.month == 12:
                current_date = datetime(current_date.year + 1, 1, 1)
            else:
                current_date = datetime(
                    current_date.year, current_date.month + 1, 1)

        return hash_table

    def check_eligible_for_regrade(self):
        return self.grade in ["06", "07"]

    def regrade(self):
        if self.eligible_for_regrade:
            self.regrade_date = datetime(2025, 1, 1)

    def populate_salary_table(self, salary_data):
        current_date = self.start_date
        current_step = self.step
        current_grade = self.grade
        current_schedule = self.schedule
        while current_date <= self.end_date:
            month_year = current_date.strftime('%B %Y')
            current_year = str(current_date.year)
            # handle new year and regrade
            if (current_date.month == 1) or (self.eligible_for_regrade and current_date == self.regrade_date):
                if self.eligible_for_regrade and current_date == self.regrade_date:
                    current_grade = '08'  # update grade due to regrade
                # get the new annual salary
                current_annual_salary = salary_data[current_schedule][current_year][current_grade][current_step]
            # handle step increases
            if month_year in [step['date'].strftime('%B %Y') for step in self.salary_steps]:
                current_step += 1
                # get the new annual salary due to step increase
                current_annual_salary = salary_data[current_schedule][current_year][current_grade][current_step]

            # compute monthly salary
            current_monthly_salary = current_annual_salary / 12
            # update the salary_table for the current month
            self.salary_table[month_year] = [
                current_monthly_salary, current_schedule, current_grade, current_step]
            # advance to next month
            if current_date.month == 12:
                current_date = datetime(current_date.year + 1, 1, 1)
            else:
                current_date += relativedelta(months=1)

    def annual_salaries(self):
        annual_salaries = {}
        current_year_start = self.start_date
        current_year_end = current_year_start + relativedelta(years=1, days=-1)

        while current_year_start <= self.end_date:
            annual_salary = 0
            for month_year in self.salary_table:
                date = datetime.strptime(month_year, '%B %Y')
                if current_year_start <= date <= current_year_end:
                    annual_salary += self.salary_table[month_year][0]
            year_range = f'{current_year_start.strftime("%B %Y")} to {current_year_end.strftime("%B %Y")}'
            annual_salaries[year_range] = round(annual_salary, 2)
            current_year_start += relativedelta(years=1)
            current_year_end += relativedelta(years=1)

        return annual_salaries

    def average_annual_salary(self):
        annual_salaries = self.annual_salaries()
        total_salary = sum(annual_salaries.values())
        avg_annual_salary = total_salary / len(annual_salaries)
        return round(avg_annual_salary, 2)

    def calculate_annual_fringe_cost(self):
        average_annual_salary = self.average_annual_salary()
        fringe_cost = average_annual_salary * FRINGE
        return round(fringe_cost, 2)

    def calculate_annual_indirect_cost(self):
        average_annual_salary = self.average_annual_salary()
        fringe_cost = self.calculate_annual_fringe_cost()
        indirect_cost = (average_annual_salary + fringe_cost) * INDIRECT
        return round(indirect_cost, 2)


def get_job_details(job_data, position_title):
    for job in job_data:
        if job[0] == position_title:
            return job[1], job[2], job[3]   # grade, schedule, step
    return None, None, None  # return None if the job was not found


def create_personnel(job):
    for data in job_data:
        if data[0] == job:
            position_name, schedule, grade, step = data
            break
    start_date_str = start_date.strftime('%m/%d/%Y')
    end_date_str = end_date.strftime('%m/%d/%Y')

    personnel = Personnel(position_name, grade, schedule,
                          step, start_date_str, end_date_str)
    personnel.populate_salary_table(salary_schedule)
    return personnel


def compute_and_display_salaries(monthly_salary_table):
    num_chunks = len(monthly_salary_table) // 12
    if len(monthly_salary_table) % 12 != 0:
        num_chunks += 1

    sum_annual_salaries = []

    for i in range(num_chunks):
        start_index = i * 12
        end_index = start_index + 12
        chunk = monthly_salary_table.iloc[start_index:end_index]
        st.dataframe(chunk)

        sum_annual_salary = chunk['Monthly Salary'].sum()
        st.write(
            f"Sum of Monthly Salaries for this period: ${sum_annual_salary:,.2f}")
        sum_annual_salaries.append(round(sum_annual_salary, 2))

        st.text("")  # add an empty line for spacing

    return sum_annual_salaries


def display_salary_details(sum_annual_salaries, monthly_salary_table, fringe_rate, indirect_rate):
    total_salary = sum(sum_annual_salaries)
    total_fringe = total_salary * fringe_rate
    total_indirect = (total_salary + total_fringe) * indirect_rate
    total_cost = total_salary + total_fringe + total_indirect

    average_annual_salary = total_salary / (len(monthly_salary_table) / 12)
    average_annual_fringe = average_annual_salary * fringe_rate
    average_annual_indirect = (
        average_annual_salary + average_annual_fringe) * indirect_rate

    st.write(f"Total Salary: ${total_salary:,.2f}")
    st.write(f"Total Fringe at {fringe_rate * 100}%: ${total_fringe:,.2f}")
    st.write(
        f"Total Indirect at {indirect_rate * 100}%: ${total_indirect:,.2f}")
    st.write(f"Total Cost for this position: ${total_cost:,.2f}")

    st.write("----------------")

    st.write(f"Average Annual Salary: ${average_annual_salary:,.2f}")
    st.write(
        f"Average Annual Fringe at {fringe_rate * 100}%: ${average_annual_fringe:,.2f}")
    st.write(
        f"Average Annual Indirect at {indirect_rate * 100}%: ${average_annual_indirect:,.2f}")


st.title("Salary Projection App")

st.sidebar.write(f"""
## About this app
Created by **Nelson Lu**, Grants Research Specialist, City of Chicago's Department of Public Health.
For more information, questions, or comments, please feel free to contact me [here](mailto:Nelson.Lu@cityofchicago.org).

[LinkedIn](https://www.linkedin.com/in/nelson-lu-075a6b53/) | [GitHub](https://github.com/nelkalm)

This app is used to calculate salary details including Total Salary, Total Fringe, Total Indirect, and Total Cost for a specific job position over a certain period of time. The app also displays the Monthly Salary Table which contains the monthly salary, schedule, grade, and step for each month within the specified period. Furthermore, it provides a feature to dynamically calculate fringe and indirect rates based on user input.
**NOTE: This app currently only works for schedules B, G, BX, GY.**

## How to use
1. **Select a Job Title**: From the dropdown, select the desired job title for which you want to calculate the salary details.
2. **Select Start Date and End Date**: Select the start and end dates for the salary calculation. The dates are selected using a date input widget.
3. **Enter fringe rate and indirect rate**: You are allowed to input the rates for fringe and indirect costs as decimal values from 0.0 to 1.0. The default values are {FRINGE} and {INDIRECT} respectively. You can adjust these values as per your requirement. Note that these values have a precision of 4 decimal places.
4. After providing all the inputs, click on the **Calculate Salary Details** button. This will calculate and display the salary details including the Total Salary, Total Fringe, Total Indirect, and Total Cost for the selected job title within the specified period. The Monthly Salary Table will also be displayed, presenting the monthly salary, schedule, grade, and step for each month within the chosen period.
Please note that if the chosen job position is eligible for a regrade, the application will automatically perform the regrade operation. For the purpose of this application, regrade is applicable for represented positions grades '06' and '07', and the regrade is assumed to occur on January 1, 2025, upgrading the grade to '08'. This regrade operation will be reflected in the salary calculations.
""")

col1, col2 = st.columns(2, gap="large")

with col1:
    titles = [job[0] for job in job_data]
    selected_job = st.selectbox(
        "Select Job Title (works only on schedules B, G, BX, GY)", titles)
    start_date = st.date_input("Select Start Date").strftime('%m/%d/%Y')
    end_date = st.date_input("Select End Date").strftime('%m/%d/%Y')

    # Add input fields for fringe and indirect rates
    fringe_rate = st.number_input(
        f"Enter fringe rate (default = {FRINGE})", min_value=0.0, max_value=1.0, value=FRINGE, step=0.0001)
    indirect_rate = st.number_input(
        f"Enter indirect rate (default = {INDIRECT})", min_value=0.0, max_value=1.0, value=INDIRECT, step=0.0001)

if st.button("Calculate Salary Details"):
    schedule, grade, step = get_job_details(job_data, selected_job)
    personnel = None

    if schedule in ["B", "G"]:
        personnel = Personnel(selected_job, grade,
                              schedule, -1, start_date, end_date)
        personnel.regrade()
    elif schedule in ["BX", "GY"]:
        personnel = PersonnelBXGY(
            selected_job, grade, schedule, 0, start_date, end_date)

    personnel.populate_salary_table(salary_schedule)

    st.write(f"Schedule: {personnel.schedule}")
    st.write(f"Initial Grade: {personnel.grade}")

    st.subheader('Monthly Salary Table')
    monthly_salary_table = pd.DataFrame.from_dict(personnel.salary_table, orient='index',
                                                  columns=['Monthly Salary', 'Schedule', 'Grade', 'Step'])
    monthly_salary_table.reset_index(inplace=True)

    sum_annual_salaries = compute_and_display_salaries(
        monthly_salary_table)

    with col2:
        st.subheader("Result")
        display_salary_details(sum_annual_salaries,
                               monthly_salary_table, fringe_rate, indirect_rate)


# ############
# position = PersonnelBXGY("ADMIN SERVICES OFFICER I-EXCLUDED",
#                          "13", "BX", 0, "9/1/2022", "7/31/2025")
# print(position.step_increase_date)
# print(position.step_up_dates)  # ['February 2024', 'February 2025']
# position.populate_salary_table(salary_schedule)
# print(position.salary_table)
# print(position.average_annual_salary())
# print(position.calculate_annual_fringe_cost())
# print(position.calculate_annual_indirect_cost())
